import nc from "next-connect";
import crypto from "crypto";
import Stripe from "stripe";

import { dbConnect, filterObject, cloneObject, renameKey } from "utils";
import User from "models/userModel";
import Tenant from "models/tenantModel";
import { withProtect } from "middleware/api/withProtect";
import { withRestrict } from "middleware/api/withRestrict";
import { withSubscription } from "middleware/api/withSubscription";
import { firebaseAdmin } from "services/firebaseAdmin";
import Email from "utils/email";

dbConnect();

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

const handler = nc({
  onError: (err, req, res, next) => {
    console.error(err);
    return res.status(500).json({
      success: false,
      data: {
        message: err.message || "Server Error",
      },
    });
  },
});

// Protect routes
handler.use(withProtect);

// Check subscription
handler.use(withSubscription);

// Restrict routes
handler.use(withRestrict("admin", "editor"));

// Send Invite
handler.post(async (req, res, next) => {
  const tenantAuth = firebaseAdmin
    .auth()
    .tenantManager()
    .authForTenant(req.user.firebase.tenant);

  // Get items from req.body
  const filteredBody = filterObject(req.body, "name", "email");

  // Check if user already exists
  const currentUser = await User.findOne({
    tenant: req.user.tenant_mongo_id,
    email: filteredBody.email,
  });

  if (currentUser) {
    throw new Error("User with email already exists.");
  }

  // Format body for Google Auth
  let googleFilteredBody = cloneObject(filteredBody);

  googleFilteredBody = renameKey(googleFilteredBody, "name", "displayName");

  // Generate invite token
  const token = crypto.randomBytes(32).toString("hex");

  const inviteToken = crypto.createHash("sha256").update(token).digest("hex");

  const now = new Date();

  const inviteTokenExpires = now.setDate(now.getDate() + 1); // Expires in 24 hours

  // Create user in MongoDB
  const user = await User.create({
    ...filteredBody,
    role: "user",
    active: "pending",
    tenant: req.user.tenant_mongo_id,
    inviteToken,
    inviteTokenExpires,
  });

  // Get tenant from MongoDB
  const tenant = await Tenant.findById(req.user.tenant_mongo_id);

  // Create user in Google
  await tenantAuth.createUser({
    uid: `${user._id}`, // Use the uid generated by MongoDB to create Firebase user
    ...googleFilteredBody,
    emailVerified: false,
    disabled: false,
  });

  // Add custom user values in Firebase
  await tenantAuth.setCustomUserClaims(`${user._id}`, {
    role: "user",
    tenant_mongo_id: req.user.tenant_mongo_id,
  });

  // Send invite email
  const url = `http://${req.headers.host}/setup?token=${token}`;

  await new Email(user, url, tenant.company).sendInvite();

  // Update Stripe subscription
  await stripe.subscriptionItems.update(req.subscription.stripeSubItemId, {
    quantity: req.subscription.quantity + 1,
  });

  return res.status(200).json({
    success: true,
    data: {
      user,
    },
  });
});

export default handler;
